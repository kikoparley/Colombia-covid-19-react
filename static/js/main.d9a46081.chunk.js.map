{"version":3,"sources":["images/logo.png","components/Navbar.js","components/ColombiaTable.js","components/Zambia.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","href","src","confLogo","alt","React","Component","ColombiaTable","props","state","loading","stats","tableRef","createRef","this","setState","fetch","then","response","json","res","console","log","catch","error","Fragment","style","marginLeft","marginRight","title","columns","field","type","data","actions","icon","tooltip","isFreeAction","onClick","current","onQueryChange","options","headerStyle","backgroundColor","color","textDecoration","fontWeight","fontSize","useStyles","makeStyles","theme","root","background","border","borderRadius","padding","display","height","width","alignItems","justifyContent","marginTop","spacing","card","maxHeight","flexDirection","minWidth","float","position","boxSizing","cardMedia","paddingTop","paddingButtom","cardContent","flexGrow","Cards","classes","useState","handleStats","useEffect","FetchData","a","CssBaseline","Container","cardGrid","maxWidth","Grid","container","justify","Card","variant","CardContent","Typography","component","cases","todayCases","deaths","todayDeaths","recovered","active","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d9a46081.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.efa57e1f.png\";","import React from \"react\";\n\nimport \"../styles/Badge.css\";\nimport confLogo from \"../images/logo.png\";\nclass Navbar extends React.Component {\n  render() {\n    return (\n      <div className='Navbar'>\n        <p className='Navbar__brand' href='/'>\n          <img className='Navbar__brand-logo' src={confLogo} alt='logo' />\n          <h1 className='Badge__section-nameIndex'> Estadísticas Covid-19</h1>\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Navbar;\n","import React from 'react';\nimport MaterialTable from 'material-table';\n\nclass ColombiaTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.tableRef = React.createRef();\n  }\n  state = {\n    loading:false,\n    stats: [],\n  }\n\n  componentDidMount() {\n    this.setState({ loading: true })\n    fetch('https://www.datos.gov.co/resource/gt2j-8ykr.json') //data source\n        .then(response => response.json())\n        .then(res => {\n            this.setState({ stats: res, loading: false }, () => console.log(res))\n        })\n        .catch(error => {\n            console.log(error)\n        })\n}\n  render() {\n    return (\n      <React.Fragment>\n        <MaterialTable style={{marginLeft:'10px', marginRight:'10px'}}\n          title=\"Casos Colombia Covid-19\"\n          columns={[\n            { title: 'Caso N°', field: 'id_de_caso' },\n            { title: 'Fecha de Diagnóstico', field: 'fecha_de_diagn_stico' },\n            { title: 'Ciudad de Ubicación', field: 'ciudad_de_ubicaci_n' },\n            { title: 'Departamento', field: 'departamento', type: 'text' },\n            { title: 'Tipo de atención', field: 'atenci_n' },\n            { title: 'Rango de edad', field: 'edad' },\n            { title: 'Sexo', field: 'sexo' },\n            { title: 'Origen del contagio', field: 'tipo' },\n            { title: 'Pais de procedencia', field: 'pa_s_de_procedencia' },\n            \n          ]}\n\n          data={this.state.stats}\n          actions={[\n            {\n              icon: 'refresh',\n              tooltip: 'Refresh',\n              isFreeAction: true,\n              onClick: () => this.tableRef.current && this.tableRef.current.onQueryChange(),\n            }, \n          ]}\n          options={{\n            \n            headerStyle: {\n              backgroundColor: '#3f51b5',\n              color: '#FFF'\n            }}\n          }\n          \n        />\n        \n        <br/>\n        <p>Datos: </p>\n        <a style={{textDecoration:'none', fontWeight:'bold', fontSize:'20px'}} \n        href=\"https://www.datos.gov.co/Salud-y-Protecci-n-Social/Casos-positivos-de-COVID-19-en-Colombia/gt2j-8ykr/data\">Api datos COVID-19 de https://www.datos.gov.co/</a>\n\n      </React.Fragment>\n    )\n  }\n}\nexport default ColombiaTable;","//importing packages starts here\nimport React, { useState, useEffect } from \"react\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport Card from \"@material-ui/core/Card\";\n\n//importing packages ends here\n\n//component styling starts here\nconst useStyles = makeStyles((theme) => ({\n  root: {\nbackground: \"linear-gradient(to right, #363795, #005C97)\",\n    border: 0,\n    borderRadius: 3,\n\n    color: \"white\",\n    padding: \"0 30px\",\n    display: \"flex\",\n    height: \"180px\",\n    width: \"350px\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginTop: theme.spacing(8),\n    backgroundColor: \"#01579b\"\n  },\n  icon: {\n    marginRight: theme.spacing(2)\n  },\n\n  card: {\n    maxHeight: \"100%\",\n    display: \"block\",\n    flexDirection: \"column\",\n    minWidth: \"400px\",\n    marginLeft: \"20.5px\",\n    marginRight: \"20.5px\",\n    float: \"right\",\n    width: \"1200px\",\n    position: \"center\",\n    borderRadius: \"5px\",\n    justifyContent: \"space-evenly\",\n    boxSizing: \"border-box\"\n  },\n  cardMedia: {\n    paddingTop: \"4.25%\", // 16:9\n    paddingButtom: \"4.25%\"\n  },\n  cardContent: {\n    flexGrow: 0\n  }\n}));\n//component styling ends here\n\n//function starts here\nexport default function Cards() {\n  const classes = useStyles();\n  const [stats, handleStats] = useState([]);\n  useEffect(() => {\n    FetchData();\n  }, []);\n\n  //data fetching from the api\n  const FetchData = async () => {\n    const data = await fetch(\"https://corona.lmao.ninja/countries/Colombia\"); //data source\n    const stats = await data.json();\n    handleStats(stats);\n  };\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <main>\n        {/* Card starts here */}\n        <Container className={classes.cardGrid} maxWidth='600px'>\n          <br />\n          <br />\n          <Grid container spacing={15} justify='space-evenly'>\n            {/* <Card className={classes.card} variant='outlined' elevation={3}>\n              <CardContent className={classes.cardContent}>\n                <CardMedia className={classes.cardMedia} align='center'>\n                  <Typography color='secondary' style={{ fontSize: 25 }}>\n                    Colombia\n                  </Typography>\n                  <Divider />\n                  <Typography color='primary' style={{ fontSize: 20 }}>\n                    Total Casos ({stats.cases}), Casos Hoy ({stats.todayCases}), Total Muertes ({stats.deaths}), Muertes\n                    Hoy ({stats.todayDeaths}), Recuperados ({stats.recovered}), Activos ({stats.active}), Criticos (\n                    {stats.critical}), Casos*Millon ({stats.casesPerOneMillion})\n                  </Typography>\n                </CardMedia>\n              </CardContent>\n            </Card> */}\n\n            <Card className={classes.root} variant='outlined'>\n              <CardContent>\n              <Typography variant='h5' component='h2'>\n                CASOS TOTALES ({stats.cases})\n                </Typography>\n                  <Typography variant='h5' component='h2'>\n                CASOS NUEVOS ({stats.todayCases})\n                </Typography>\n\n              </CardContent>\n              {/* <CardActions>\n                <Button size='small'>Learn More</Button>\n              </CardActions> */}\n            </Card>\n\n            <Card className={classes.root} variant='outlined'>\n              <CardContent>\n              <Typography variant='h5' component='h2'>\n                TOTAL MUERTES ({stats.deaths})\n                </Typography>\n                  <Typography variant='h5' component='h2'>\n                  MUERTES HOY ({stats.todayDeaths})\n                </Typography>\n\n              </CardContent>\n              {/* <CardActions>\n                <Button size='small'>Learn More</Button>\n              </CardActions> */}\n            </Card>\n\n            <Card className={classes.root} variant='outlined'>\n              <CardContent>\n                <Typography variant='h5' component='h2'>\n                RECUPERADOS ({stats.recovered})\n                </Typography>\n                  <Typography variant='h5' component='h2'>\n                ACTIVOS ({stats.active})\n                </Typography>\n\n              </CardContent>\n              {/* <CardActions>\n                <Button size='small'>Learn More</Button>\n              </CardActions> */}\n            </Card>\n          </Grid>\n          <br />\n          <br />\n        </Container>\n        {/* Card ends here */}\n      </main>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\r\n//import fetch from './components/fetch'\r\nimport './App.css';\r\nimport Navbar from './components/Navbar';\r\n// import WorldTable from './components/WorldTable';\r\nimport ColombiaTable from './components/ColombiaTable';\r\n// import Cards from './components/Cards';\r\n// import ColombiaCards from './components/Cards';\r\nimport Zambia from './components/Zambia'\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n     <Navbar/>\r\n     {/* <Cards/> */}\r\n     {/* <ColombiaCards/> */}\r\n     <Zambia/>\r\n     {/* <WorldTable/> */}\r\n     <ColombiaTable/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}